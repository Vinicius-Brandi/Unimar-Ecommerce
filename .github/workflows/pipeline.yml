name: CI/CD do Marketplace Django

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4 # Usando a versão mais recente

      - name: Configurar ambiente Python
        uses: actions/setup-python@v5 # Usando a versão mais recente
        with:
          python-version: '3.12' # Mantenha a versão do Python consistente com seu Containerfile

      - name: Cache de dependências Python
        uses: actions/cache@v4 # Usando a versão mais recente
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Instalar dependências e ferramentas
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Certifique-se que estas ferramentas estão no seu requirements.txt se for instalar aqui
          pip install black bandit djhtml coverage gunicorn # Adicione gunicorn para os testes, se for testar com ele

      - name: Formatar o código com Black
        run: black --check .

      - name: Análise de Segurança Estática
        run: bandit -f json -o bandit_report.json .
        continue-on-error: true # Permite que a pipeline continue mesmo com erros no Bandit

      - name: Lint de Templates Django com djhtml
        run: djhtml --check .

      - name: Checar migrations pendentes
        run: python manage.py makemigrations --check --dry-run
        # Este passo verifica se há migrações faltando no seu código-fonte,
        # mas não executa as migrações no banco de dados.

      - name: Rodar testes com coverage
        run: |
          coverage run manage.py test
          coverage report

      - name: Gerar relatório de cobertura em HTML
        run: coverage html

      - name: Publicar HTML do coverage como artefato
        uses: actions/upload-artifact@v4
        with:
          name: cobertura-html
          path: htmlcov/

  ---

  build-and-push-container:
    needs: build-and-test # Este job só executa se o 'build-and-test' for bem-sucedido
    runs-on: ubuntu-latest
    # Apenas faz push para as branches 'main' ou 'develop' após sucesso
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write # Permissão necessária para fazer push para o GitHub Container Registry

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # --- PASSO CRUCIAL PARA O CACHE ---
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3 # Configura o builder do Buildx para suportar cache
      # ---------------------------------

      - name: Definir tags da imagem Docker
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Usa o GitHub Container Registry
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # 'latest' apenas no main
            type=sha,format=short # Usa o short SHA do commit como tag
            type=ref,event=branch # Usa o nome do branch (ex: develop)

      - name: Fazer login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Token temporário e seguro do GitHub Actions

      - name: Construir e fazer push da imagem do Container
        uses: docker/build-push-action@v5
        with:
          context: . # Onde seu Containerfile está localizado (raiz do projeto)
          file: ./Containerfile # Especifica o nome do arquivo, já que não é o padrão 'Dockerfile'
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha # Habilita o cache de build do GitHub Actions
          cache-to: type=gha,mode=max # Escreve o cache para o GitHub Actions

